#----------------------------------------------------------------------------#
# Imports
#----------------------------------------------------------------------------#

from email.policy import default
import json
import dateutil.parser
import babel
from flask import Flask, render_template, request, Response, flash, redirect, url_for
from flask_moment import Moment
from flask_sqlalchemy import SQLAlchemy
import logging
from logging import Formatter, FileHandler
from flask_wtf import Form
from forms import *
from flask_migrate import Migrate
from sqlalchemy.sql import func
#from models import *#dbArtist, Venue, shows

#----------------------------------------------------------------------------#
# App Config.
#----------------------------------------------------------------------------#

app = Flask(__name__)
moment = Moment(app)
app.config.from_object('config')
db = SQLAlchemy(app)
migrate = Migrate(app, db)

#from . import models
# TODO: connect to a local postgresql database
# DONE IN confi.py FILE

#----------------------------------------------------------------------------#
# Models.
#----------------------------------------------------------------------------#

# I HAVE TO DECLARE THE ASSOCIATION TABLE FIRST TO BE ABLE TO USE THE VARIABLE IN THE OTHER TABLES
shows = db.Table('Show',
    db.Column('Artist_id', db.ForeignKey('Artist.id'), primary_key=True),
    db.Column("Venue_id", db.ForeignKey('Venue.id'), primary_key=True),
    db.Column('start_time', db.DateTime(), nullable=False)
)


class Venue(db.Model):
    __tablename__ = 'Venue'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    city = db.Column(db.String(120))
    state = db.Column(db.String(120))
    address = db.Column(db.String(120))
    phone = db.Column(db.String(120))
    image_link = db.Column(db.String(500))
    facebook_link = db.Column(db.String(120))

    # TODO: implement any missing fields, as a database migration using Flask-Migrate
    genres = db.Column(db.String(120))
    web_link = db.Column(db.String(120))
    looking_for_talent = db.Column(db.Boolean, default=False)
    seeking_description = db.Column(db.String(500))
    artists = db.relationship("Artist", secondary=shows, lazy='subquery', backref=db.backref('Venue', lazy=True))

    def __repr__(self):
      return "<Venue(id='%d', name='%s', city='%s', state='%s', address='%s', phone='%s')>" % (
              self.id, self.name, self.city, self.state, self.address, self.phone)


class Artist(db.Model):
    __tablename__ = 'Artist'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    city = db.Column(db.String(120))
    state = db.Column(db.String(120))
    phone = db.Column(db.String(120))
    genres = db.Column(db.String(120))
    image_link = db.Column(db.String(500))
    facebook_link = db.Column(db.String(120))

    # TODO: implement any missing fields, as a database migration using Flask-Migrate
    web_link = db.Column(db.String(120))
    looking_for_talent = db.Column(db.Boolean, default=False)
    seeking_description = db.Column(db.String(500))


    def __repr__(self):
      return f"Artist <id: {'%d'}, name: {'%s'}, city: {'%s'}, state: {'%s'}, phone: {'%s'}, genre: {'%s'}, image_link: {'%s'}, facebook_link: {'%s'}, web_link: {'%s'}, looking_for_talent: {'%r'}, seeking_description: {'%s'}>"% (
        self.id, self.name, self.city, self.state, self.phone, self.genre, self.image_link,
        self.facebook_link, self.web_link, self.looking_for_talent, self.seeking_description)

    
# TODO Implement Show and Artist models, and complete all model relationships and properties, as a database migration.
# PLEASE SEE LINE 10


#################################################################################################
import os
SECRET_KEY = os.urandom(32)
# Grabs the folder where the script runs.
basedir = os.path.abspath(os.path.dirname(__file__))

# Enable debug mode.
DEBUG = True

# Connect to the database


# TODO IMPLEMENT DATABASE URL
SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:Just!casual,22@localhost:5432/fyyurapp'

# SUPPRESS THE WARNING IN THE CONSOLE
SQLALCHEMY_TRACK_MODIFICATIONS = False
#####################################################################################################""

  #db.session.bind.execute(<YOUR-SQL-STATEMENT>)
  sql ='SELECT id,name,state,city from "Venue";'
  sql2 = 'SELECT count(*) FROM "Venue" WHERE "Venue".id = id;'
  #db.session.execute(sql)
  query = db.session.query(Venue).all()
  cnt2 = len(query)
  cnt = db.session.execute(sql2)
  print(cnt2)
  '''for n in cnt2:
    venue = venues[n]
    print(venue)'''

  #data2 = 

#####################################################################################################""
from dotenv import load_dotenv
load_dotenv()  # take environment variables from .env.

#to read the env variables is as simple as:
SECRET_KEY = os.environ.get("SECRET_KEY")
DATABASE_PASSWORD = os.environ.get("DATABASE_PASSWORD")
#****************************************************************************************************************


